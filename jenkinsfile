#!groovy
pipeline{
 agent any
 
  tools {
    maven 'maven'
  }
//   environment{
//     sonar_token=credentials("")
//     dojo_sonar_url= 'URL'
//   }


stages{
        //stage('Code Clone from GIT'){
          //  steps{
            //    withCredentials()
            //}
        //}

        stage('Compile and Clean'){
            steps{
                script{
                       try{
                            bat "mvn -f pom.xml clean compile"
                       }
                       catch(all){
                            echo "Compile and clean stage Failed"
                       }
                }
            }
        }

        stage('Test'){
                    steps{
                        script{
                               try{
                                    bat " mvn -f pom.xml test"
                               }
                               catch(all){
                                    echo "Test stage Failed"
                               }
                        }
                    }
                }

        stage('Build'){
                    steps{
                        script{
                               try{
                                    bat "mvn -f pom.xml package"
                               }
                               catch(all){
                                    echo "Build stage Failed. War file not created"
                               }
                        }
                    }
                }
        stage('Verify'){
            steps{
                script{
                       try{
                            bat "mvn -f pom.xml verify"
                       }
                       catch(all){
                            echo "Verify stage Failed"
                       }
                }
            }
        }

        stage('Install'){
            steps{
                script{
                       try{
                            bat "mvn -f pom.xml install"
                       }
                       catch(all){
                            echo "Install stage Failed"
                       }
                }
            }
        }


        stage('SonarQube Report'){
            steps{
                bat  "mvn -f pom.xml"
            }
            post{
                always{
                    junit allowEmptyResults: true,testResults: '**/test-results/*.xml'
                }
                failure{
                    echo "Pipeline Failed"
                }
            }
        }

//        stage('Code Coverage Report'){

        //}

//         stage('Build Docker'){
//               bat "docker build -f dockerfile -t insappv1 . "
//         }

//         stage('Deployment on Kubernetes'){
// 
//         }


  }
//   catch(all) {
//          currentBuild.result = 'FAILURE'
//          //post {
//            //  always {
//              //        emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'
//             // }
//         // }
//   }

  //finally {
    //     step $class: 'JUnitResultArchiver', testResults: '**/TEST-*.xml'
  //}

}

